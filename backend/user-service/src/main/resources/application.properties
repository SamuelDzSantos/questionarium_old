# -----------------------------------------------------------------------------
# Configuração do User Service
# -----------------------------------------------------------------------------

# Nome da aplicação
spring.application.name=user-service

# Porta em que o User Service irá rodar
server.port=14002

# -----------------------------------------------------------------------------
# Banco de dados PostgreSQL (rodando no Docker, mapeado para localhost:10000)
# -----------------------------------------------------------------------------
# URL aponta para o container Postgres na porta 10000, banco “questionarium_user_db”
spring.datasource.url=jdbc:postgresql://localhost:10000/questionarium_user_db
spring.datasource.username=admin
spring.datasource.password=Admin_123

# Gera/update das tabelas automaticamente (em produção, use update ou validate conforme estratégia)
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# -----------------------------------------------------------------------------
# RabbitMQ (Docker, user=admin, pass=admin)
# -----------------------------------------------------------------------------
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin

# -----------------------------------------------------------------------------
# Spring Cloud Stream (Binder RabbitMQ) – saída de evento “userCreated”
# -----------------------------------------------------------------------------

# Destino (exchange) de saída
spring.cloud.stream.bindings.userCreated-out-0.destination=user-exchange

# Routing key para o RabbitMQ (Producer)
spring.cloud.stream.rabbit.bindings.userCreated-out-0.producer.routing-key-expression='user.created'

# (Opcional) criar DLQ automaticamente no consumidor, se necessário
spring.cloud.stream.rabbit.bindings.userCreated-out-0.consumer.autoBindDlq=true

# Jackson serialização LOCALDATE
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false

# Opcional: variáveis para facilitar alterações
user.exchange.name=user-exchange
user.routing.created=user.created
user.routing.email=user.email

# Chave secreta para validar tokens JWT (mesma usada pelo Auth Service)
spring.security.oauth2.resourceserver.jwt.secret=1029831093810283dwiajhdkwadhkauhd10283091kdjwakdjawkd
app.cors.allowed-origins=http://localhost:4200